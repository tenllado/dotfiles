#!/bin/bash

delete=1
program_name=$0
DFPATH="$(dirname $(realpath $0))"

clean_old() {
	if [ ${delete} -eq 0 ] && [ ! -L "$1" ]; then
		mv "$1" "$1.backup"
	elif [ -f "$1" ]; then
		rm "$1"
	fi
}

install_files() {
	local file
	while (( $# )); do
		file="$1"
		shift
		if [ "$file" == "./README" ] || [ "$file" == "./install" ]; then
			echo "skipping ${file}"
			continue
		fi

		fname=$(basename $file)
		dname=$(dirname $file)

		if [ "$dname" == "." ]; then
			clean_old "${HOME}/.${fname}"
			ln -s "${DFPATH}/$fname" "${HOME}/.${fname}"
		else
			dname="${dname#./}"
			subdirs=($(echo "${dname}" | sed 's/\// /g'))
			second="${subdirs[0]}/${subdirs[1]}"
			if [ -L "${HOME}/.${second}" ]; then
				rm "${HOME}/.${second}"
			fi
			if [ ! -L "${HOME}/.${dname}/${fname}" ]; then
				clean_old "${HOME}/.${dname}/${fname}"
				mkdir -p "${HOME}/.${dname}"
				ln -s "${DFPATH}/${dname}/${fname}" "${HOME}/.${dname}/${fname}"
			fi
		fi
	done
}

usage() {
	echo "$program_name [-b] [-h]"
	echo
	printf "\t-b backup old files instead of deleting them\n"
	printf "\t-h: shows this help message\n"
	printf "\n"
}

while getopts "dh" o; do
    case "${o}" in
        h)
			usage
			exit 0
			;;
		b)
			delete=0
            ;;
        *)
            usage
			exit 0
            ;;
    esac
done

pushd "${DFPATH}" > /dev/null
git submodule update --init
install_files $(find . -path "./.git*" -prune -o -type f -print)
popd > /dev/null

# for vim minpack plugin
if [ ! -d ~/.config/vim/pack ]; then
	mkdir -p ~/.config/vim/pack
fi
pushd ~/.config/vim/pack > /dev/null
if [ ! -d minpack ]; then
	mkdir -p minpack/opt
	cd minpack/opt
	git clone git@github.com:k-takata/minpac.git
fi
popd > /dev/null

ln -sfTv ~/.config/vim/vimrc ~/.vimrc 
ln -sfTv ~/.config/vim/ ~/.vim
